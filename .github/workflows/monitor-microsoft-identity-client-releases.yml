# GitHub Workflow to monitor Microsoft.Identity.Client NuGet releases
# This workflow checks for new releases of Microsoft.Identity.Client package on NuGet
# and creates an issue when a new version is detected

name: Monitor Microsoft.Identity.Client NuGet Releases

on:
  schedule:
    # Run daily at 9:00 AM UTC
    - cron: '0 9 * * *'
  workflow_dispatch: # Allow manual triggering

env:
  PACKAGE_NAME: 'Microsoft.Identity.Client'
  NUGET_API_URL: 'https://api.nuget.org/v3-flatcontainer'

jobs:
  Check-Version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup PowerShell
        shell: pwsh
        run: |
          Write-Host "PowerShell version: $($PSVersionTable.PSVersion)"

      - name: Get Latest NuGet Package Information
        id: get-package
        shell: pwsh
        run: |
          try
          {
              # Get the package versions from NuGet API
              $PackageName = $env:PACKAGE_NAME.ToLower()
              $ApiUrl = "$env:NUGET_API_URL/$PackageName/index.json"
              Write-Host "Fetching package information from: $ApiUrl"

              $Response = Invoke-RestMethod -Uri $ApiUrl -Headers @{
                  'User-Agent' = 'GitHub-Actions-Version-Monitor'
              }

              # Get the latest version (last in the versions array)
              $LatestVersion = $Response.versions | Select-Object -Last 1
              Write-Host "Latest version found: $LatestVersion"

              # Get detailed package information from NuGet Gallery API
              $PackageInfoUrl = "https://api.nuget.org/v3/registration5-gz-semver2/$PackageName/$LatestVersion.json"
              Write-Host "Fetching detailed package info from: $PackageInfoUrl"

              try {
                  $PackageDetails = Invoke-RestMethod -Uri $PackageInfoUrl -Headers @{
                      'User-Agent' = 'GitHub-Actions-Version-Monitor'
                  }

                  $PublishedDate = $PackageDetails.published
                  $PackageUrl = "https://www.nuget.org/packages/$env:PACKAGE_NAME/$LatestVersion"
                  $ReleaseNotes = if ($PackageDetails.releaseNotes) { $PackageDetails.releaseNotes } else { "No release notes available" }
                  $Description = if ($PackageDetails.description) { $PackageDetails.description } else { "" }
              }
              catch {
                  Write-Warning "Could not fetch detailed package information: $($_.Exception.Message)"
                  $PublishedDate = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")
                  $PackageUrl = "https://www.nuget.org/packages/$env:PACKAGE_NAME/$LatestVersion"
                  $ReleaseNotes = "Release notes not available"
                  $Description = ""
              }

              Write-Host "Published date: $PublishedDate"

              # Output variables for next steps
              Write-Output "latest-version=$LatestVersion" >> $env:GITHUB_OUTPUT
              Write-Output "package-url=$PackageUrl" >> $env:GITHUB_OUTPUT
              Write-Output "published-date=$PublishedDate" >> $env:GITHUB_OUTPUT

              # Escape release notes for GitHub output
              $EscapedNotes = $ReleaseNotes -replace "`n", "%0A" -replace "`r", "%0D"
              Write-Output "release-notes=$EscapedNotes" >> $env:GITHUB_OUTPUT

              $EscapedDescription = $Description -replace "`n", "%0A" -replace "`r", "%0D"
              Write-Output "description=$EscapedDescription" >> $env:GITHUB_OUTPUT
          }
          catch
          {
              Write-Error "Failed to fetch package information: $($_.Exception.Message)"
              exit 1
          }

      - name: Check Previous Version
        id: check-previous
        shell: pwsh
        run: |
          $VersionFile = "last-known-version.txt"

          if (Test-Path $VersionFile)
          {
              $PreviousVersion = Get-Content $VersionFile -Raw
              $PreviousVersion = $PreviousVersion.Trim()
              Write-Host "Previous version: $PreviousVersion"
              Write-Output "previous-version=$PreviousVersion" >> $env:GITHUB_OUTPUT
              Write-Output "has-previous=true" >> $env:GITHUB_OUTPUT
          }
          else
          {
              Write-Host "No previous version file found"
              Write-Output "has-previous=false" >> $env:GITHUB_OUTPUT
              Write-Output "previous-version=" >> $env:GITHUB_OUTPUT
          }

      - name: Compare Versions
        id: compare
        shell: pwsh
        run: |
          $LatestVersion = "${{ steps.get-package.outputs.latest-version }}"
          $PreviousVersion = "${{ steps.check-previous.outputs.previous-version }}"
          $HasPrevious = "${{ steps.check-previous.outputs.has-previous }}" -eq "true"

          Write-Host "Comparing versions:"
          Write-Host "  Latest: $LatestVersion"
          Write-Host "  Previous: $PreviousVersion"

          $IsNewVersion = $false

          if (-not $HasPrevious)
          {
              Write-Host "No previous version recorded - treating as new"
              $IsNewVersion = $true
          }
          elseif ($LatestVersion -ne $PreviousVersion)
          {
              Write-Host "Version has changed - new version detected"
              $IsNewVersion = $true
          }
          else
          {
              Write-Host "No version change detected"
          }

          Write-Output "is-new-version=$IsNewVersion" >> $env:GITHUB_OUTPUT

      - name: Update Version File
        if: steps.compare.outputs.is-new-version == 'true'
        shell: pwsh
        run: |
          $LatestVersion = "${{ steps.get-package.outputs.latest-version }}"
          Write-Host "Updating version file with: $LatestVersion"
          Set-Content -Path "last-known-version.txt" -Value $LatestVersion

      - name: Update README Version
        if: steps.compare.outputs.is-new-version == 'true'
        shell: pwsh
        run: |
          $LatestVersion = "${{ steps.get-package.outputs.latest-version }}"
          $ReadmePath = "README.md"

          Write-Host "Updating README.md with version: $LatestVersion"

          if (Test-Path $ReadmePath)
          {
              # Read the current README content
              $Content = Get-Content -Path $ReadmePath -Raw

              # Replace the version placeholder with the latest version
              $Pattern = '<!--Version-->[^<]*<!--/Version-->'
              $Replacement = "<!--Version-->$LatestVersion<!--/Version-->"
              $UpdatedContent = $Content -replace $Pattern, $Replacement

              # Write the updated content back to the file
              Set-Content -Path $ReadmePath -Value $UpdatedContent -NoNewline
              Write-Host "README.md updated successfully"
          }
          else
          {
              Write-Warning "README.md file not found"
          }

      - name: Commit Version Updates
        if: steps.compare.outputs.is-new-version == 'true'
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add last-known-version.txt README.md

          # Check if there are changes to commit
          $Status = git status --porcelain
          if ($Status)
          {
              git commit -m "📦chore: update tracked version to ${{ steps.get-package.outputs.latest-version }}"
              git push origin HEAD:${{ github.ref_name }}
          }
          else
          {
              Write-Host "No changes to commit"
          }

      - name: Create Issue for New Version
        if: steps.compare.outputs.is-new-version == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const latestVersion = '${{ steps.get-package.outputs.latest-version }}';
            const packageUrl = '${{ steps.get-package.outputs.package-url }}';
            const publishedDate = '${{ steps.get-package.outputs.published-date }}';
            const previousVersion = '${{ steps.check-previous.outputs.previous-version }}';
            const releaseNotes = `${{ steps.get-package.outputs.release-notes }}`.replace(/%0A/g, '\n').replace(/%0D/g, '\r');
            const description = `${{ steps.get-package.outputs.description }}`.replace(/%0A/g, '\n').replace(/%0D/g, '\r');

            const issueTitle = `New Microsoft.Identity.Client NuGet Release: ${latestVersion}`;

            let issueBody = `## 🚀 New NuGet Package Release Detected\n\n`;
            issueBody += `**Package:** Microsoft.Identity.Client\n`;
            issueBody += `**New Version:** ${latestVersion}\n`;
            if (previousVersion) {
              issueBody += `**Previous Version:** ${previousVersion}\n`;
            }
            issueBody += `**Published Date:** ${publishedDate}\n`;
            issueBody += `**NuGet Package URL:** ${packageUrl}\n\n`;

            if (description && description.trim()) {
              issueBody += `### 📄 Package Description\n\n`;
              issueBody += description;
              issueBody += `\n\n`;
            }

            issueBody += `### 📦 Installation Commands\n\n`;
            issueBody += `**Package Manager Console:**\n`;
            issueBody += `\`\`\`powershell\n`;
            issueBody += `Install-Package Microsoft.Identity.Client -Version ${latestVersion}\n`;
            issueBody += `\`\`\`\n\n`;

            issueBody += `**PackageReference (csproj):**\n`;
            issueBody += `\`\`\`xml\n`;
            issueBody += `<PackageReference Include="Microsoft.Identity.Client" Version="${latestVersion}" />\n`;
            issueBody += `\`\`\`\n\n`;

            issueBody += `**dotnet CLI:**\n`;
            issueBody += `\`\`\`bash\n`;
            issueBody += `dotnet add package Microsoft.Identity.Client --version ${latestVersion}\n`;
            issueBody += `\`\`\`\n\n`;

            if (releaseNotes && releaseNotes.trim() && releaseNotes !== "No release notes available") {
              issueBody += `### 📝 Release Notes\n\n`;
              issueBody += releaseNotes;
              issueBody += `\n\n`;
            }

            issueBody += `### 🔗 Useful Links\n`;
            issueBody += `- [NuGet Package](${packageUrl})\n`;
            issueBody += `- [All Versions](https://www.nuget.org/packages/Microsoft.Identity.Client/)\n`;
            issueBody += `- [GitHub Repository](https://github.com/AzureAD/microsoft-authentication-library-for-dotnet)\n`;
            issueBody += `- [Documentation](https://learn.microsoft.com/en-us/entra/msal/dotnet/)\n`;
            issueBody += `- [NuGet Gallery](https://www.nuget.org/packages/Microsoft.Identity.Client/)\n\n`;

            issueBody += `---\n`;
            issueBody += `*This issue was automatically created by the NuGet version monitoring workflow.*`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['dependency-update', 'microsoft-identity', 'automated']
            });

      - name: Report Status
        shell: pwsh
        run: |
          $LatestVersion = "${{ steps.get-package.outputs.latest-version }}"
          $IsNewVersion = "${{ steps.compare.outputs.is-new-version }}" -eq "true"

          Write-Host "=== NuGet Package Monitor Report ===" -ForegroundColor Green
          Write-Host "Package: $env:PACKAGE_NAME" -ForegroundColor Cyan
          Write-Host "Latest Version: $LatestVersion" -ForegroundColor Yellow

          if ($IsNewVersion)
          {
              Write-Host "Status: New version detected! Issue created." -ForegroundColor Green
          }
          else
          {
              Write-Host "Status: No version change detected." -ForegroundColor Blue
          }
          Write-Host "====================================" -ForegroundColor Green
