name: MSAL Dependency Updater

on:
  schedule:
    # Check daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write

jobs:
  check-and-update-msal:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for package updates
        id: check_packages
        shell: pwsh
        run: |
          # Define packages to check
          $Packages = @(
              @{
                  Name = "Microsoft.Identity.Client"
                  VersionFile = "MSAL_VERSION.txt"
              },
              @{
                  Name = "Microsoft.Identity.Client.Extensions.Msal"
                  VersionFile = "MSAL_Extensions_VERSION.txt"
              },
              @{
                  Name = "Microsoft.Identity.Client.NativeInterop"
                  VersionFile = "MSAL_NativeInterop_VERSION.txt"
              }
              @{
                  Name = "Microsoft.Identity.Client.Broker"
                  VersionFile = "MSAL_Broker_VERSION.txt"
              },
              @{
                  Name = "Microsoft.Identity.Abstractions"
                  VersionFile = "MSAL_Abstractions_VERSION.txt"
              }
          )

          # Set initial defaults.
          $LibPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "DLLPickle\lib"
          $UpdatesAvailable = $false
          $UpdateSummary = @()

          # Check each package version for updates.
          foreach ($Package in $Packages) {
              Write-Host "`n=== Checking $($Package.Name) ===" -ForegroundColor Cyan

              # Get the current version in the module repository.
              $CurrentVersionFile = Join-Path -Path $LibPath -ChildPath $Package.VersionFile
              if (Test-Path $CurrentVersionFile) {
                  $CurrentVersion = (Get-Content $CurrentVersionFile -Raw).Trim()
              } else {
                  $CurrentVersion = "0.0.0"
              }
              Write-Host "Current version: $CurrentVersion"

              # Check the latest version from NuGet.
              $NuGetUrl = "https://api.nuget.org/v3-registration5-semver1/$($Package.Name.ToLower())/index.json"
              try {
                  $Response = Invoke-RestMethod -Uri $NuGetUrl -ErrorAction Stop
                  $LatestVersion = $Response.items[-1].upper
                  Write-Host "Latest version: $LatestVersion"

                  if ([version]$LatestVersion -gt [version]$CurrentVersion) {
                      Write-Host "✓ Update available!" -ForegroundColor Green
                      $UpdatesAvailable = $true
                      $UpdateSummary += "$($Package.Name): $CurrentVersion → $LatestVersion"
                  } else {
                      Write-Host "Already up to date" -ForegroundColor Gray
                  }
              } catch {
                  Write-Warning "Failed to check $($Package.Name): $_"
              }
          }

          if ($UpdatesAvailable) {
              "updates_available=true" >> $env:GITHUB_OUTPUT
              $SummaryText = $UpdateSummary -join "; "
              "update_summary=$SummaryText" >> $env:GITHUB_OUTPUT
          } else {
              "updates_available=false" >> $env:GITHUB_OUTPUT
          }

      - name: Download and extract packages
        if: steps.check_packages.outputs.updates_available == 'true'
        shell: pwsh
        run: |
          # Define packages to update
          $Packages = @(
              @{
                  Name = "Microsoft.Identity.Client"
                  VersionFile = "MSAL_VERSION.txt"
              },
              @{
                  Name = "Microsoft.Identity.Client.Extensions.Msal"
                  VersionFile = "MSAL_Extensions_VERSION.txt"
              },
              @{
                  Name = "Microsoft.Identity.Client.NativeInterop"
                  VersionFile = "MSAL_NativeInterop_VERSION.txt"
              }
              @{
                  Name = "Microsoft.Identity.Client.Broker"
                  VersionFile = "MSAL_Broker_VERSION.txt"
              },
              @{
                  Name = "Microsoft.Identity.Abstractions"
                  VersionFile = "MSAL_Abstractions_VERSION.txt"
              }
          )

          $LibPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "DLLPickle\lib"
          New-Item -ItemType Directory -Path $LibPath -Force | Out-Null

          # Create temp directory
          $TempDir = Join-Path $env:TEMP "msal_update"
          if (Test-Path $TempDir) {
              Remove-Item $TempDir -Recurse -Force
          }
          New-Item -ItemType Directory -Path $TempDir -Force | Out-Null

          foreach ($Package in $Packages) {
              Write-Host "`n=== Processing $($Package.Name) ===" -ForegroundColor Cyan

              # Get current version
              $CurrentVersionFile = Join-Path -Path $LibPath -ChildPath $Package.VersionFile
              if (Test-Path $CurrentVersionFile) {
                  $CurrentVersion = (Get-Content $CurrentVersionFile -Raw).Trim()
              } else {
                  $CurrentVersion = "0.0.0"
              }

              # Get latest version
              $NuGetUrl = "https://api.nuget.org/v3-registration5-semver1/$($Package.Name.ToLower())/index.json"
              try {
                  $Response = Invoke-RestMethod -Uri $NuGetUrl -ErrorAction Stop
                  $LatestVersion = $Response.items[-1].upper

                  if ([version]$LatestVersion -gt [version]$CurrentVersion) {
                      Write-Host "Downloading version $LatestVersion..."

                      # Download package
                      $DownloadUrl = "https://www.nuget.org/api/v2/package/$($Package.Name)/$LatestVersion"
                      $NupkgPath = Join-Path $TempDir "$($Package.Name).$LatestVersion.nupkg"
                      Invoke-WebRequest -Uri $DownloadUrl -OutFile $NupkgPath -ErrorAction Stop

                      # Extract (nupkg is just a zip)
                      $ExtractPath = Join-Path $TempDir "$($Package.Name)_extracted"
                      Expand-Archive -Path $NupkgPath -DestinationPath $ExtractPath -Force

                      # Try multiple framework paths in order of preference
                      $FrameworkPaths = @(
                          "lib\netstandard2.0\*.dll",
                          "lib\netstandard2.1\*.dll",
                          "lib\net6.0\*.dll",
                          "lib\net472\*.dll",
                          "runtimes\win\lib\netstandard2.0\*.dll",
                          "runtimes\win\lib\net6.0\*.dll"
                      )

                      $DllsCopied = $false
                      foreach ($FwPath in $FrameworkPaths) {
                          $SourceDlls = Join-Path $ExtractPath $FwPath
                          $DllFiles = Get-Item $SourceDlls -ErrorAction SilentlyContinue
                          if ($DllFiles) {
                              Write-Host "Copying DLLs from $FwPath..."
                              Copy-Item -Path $SourceDlls -Destination $LibPath -Force
                              $DllsCopied = $true
                              break
                          }
                      }

                      if (-not $DllsCopied) {
                          Write-Warning "No compatible DLLs found for $($Package.Name)"
                      } else {
                          # Save version info
                          $LatestVersion | Set-Content -Path (Join-Path -Path $LibPath -ChildPath $Package.VersionFile) -NoNewline
                          Write-Host "✓ $($Package.Name) $LatestVersion extracted successfully" -ForegroundColor Green
                      }
                  } else {
                      Write-Host "Already up to date" -ForegroundColor Gray
                  }
              } catch {
                  Write-Warning "Failed to process $($Package.Name): $_"
              }
          }

          # Cleanup temp directory
          if (Test-Path $TempDir) {
              Remove-Item $TempDir -Recurse -Force
          }

      - name: Update module manifest
        id: update_module_manifest
        if: steps.check_packages.outputs.updates_available == 'true'
        shell: pwsh
        run: |
          $ManifestPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "DLLPickle\DLLPickle.psd1"

          # Read current manifest
          $Manifest = Import-PowerShellDataFile -Path $ManifestPath
          $CurrentModuleVersion = [version]$Manifest.ModuleVersion

          # Increment patch version
          $NewModuleVersion = "{0}.{1}.{2}" -f $CurrentModuleVersion.Major, $CurrentModuleVersion.Minor, ($CurrentModuleVersion.Build + 1)

          # Update manifest
          Update-ModuleManifest -Path $ManifestPath -ModuleVersion $NewModuleVersion

          Write-Host "Updated module version to $NewModuleVersion"
          "new_module_version=$NewModuleVersion" >> $env:GITHUB_OUTPUT

      - name: Commit and push changes
        if: steps.check_packages.outputs.updates_available == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add DLLPickle/lib/* DLLPickle/DLLPickle.psd1
          git commit -m "Update MSAL packages: ${{ steps.check_packages.outputs.update_summary }}"
          git push

      - name: Create GitHub Release
        if: steps.check_packages.outputs.updates_available == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.update_module_manifest.outputs.new_module_version }}
          name: Release v${{ steps.update_module_manifest.outputs.new_module_version }}
          body: |
            ## MSAL Package Updates

            ${{ steps.check_packages.outputs.update_summary }}

            This release includes updated MSAL dependencies to ensure compatibility and security.
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

#      - name: Publish to PowerShell Gallery
#        if: steps.check_packages.outputs.updates_available == 'true'
#        shell: pwsh
#        run: |
#          Publish-Module -Path . -NuGetApiKey ${{ secrets.PSGALLERY_API_KEY }}
#          Write-Host "Module published to PowerShell Gallery"
